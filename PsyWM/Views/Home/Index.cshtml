@{
    ViewData["Title"] = "Home Page";
}

<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-csv/1.0.11/jquery.csv.min.js"></script>

<div>
    <!--<h1 class="display-4">Hi.</h1>-->

    <div class="exp-canvas">
        <div id="dlg">
            <!--<form action="/action_page.php">-->
            <label for="subjectID">Subject ID </label><br>
            <input type="text" id="subjectID" name="subjectID"><br><br>
            <label for="stimSet">Condition (1 or 2) </label><br>
            <input type="text" id="stimSet" name="stimSet"><br><br>

            <!--<input type="submit" value="Submit">-->
            <!--</form>-->
            <input type="button" class="btn" id="setOK" value="OK">
        </div>

        <p class="exp-text" id="instruct">
            Your task is to determine whether the two sets of colors
            are identical.<br><br>Once the second color set shows up, react as accurately and quickly
            as possible.<br><br>
            <input type="button" class="btn" id="next" value="Next">
        </p>
        <div class="exp-cross" id="crossFocus">+</div>
        <div id="stim">
            <div class="exp-cross" id="crossStim">+</div>
            <div class="square" id="s1"></div>
            <div class="square" id="s2"></div>
            <div class="square" id="s3"></div>
            <div class="square" id="s4"></div>
        </div>
    </div>
    <p class="ref-fontsize">
        <br>Implement the experiment design in the study,
        Luck, S., Vogel, E. The capacity of visual working memory for features and conjunctions.
        Nature 390, 279–281 (1997).<br>
        <a href="https://doi.org/10.1038/36846">Read the abstract on Nature</a>.
    </p>
</div>

<script>
    //$(document).keydown(false);
    let isTimeToStart = false;
    let isResponsing = false;
    let subIdVal = "whoDefault";
    let conditionVal = 'whichDefault';
    let data;
    let dataS1;
    let dataS2;

    let set2_data = $.csv.toObjects('set2.csv');
    let set4_data = $.csv.toObjects('set4.csv');

    let rkey = [];
    let rt = [];
    let crt = [];
    let record = [[], [], [], [], [], [], [], [], [], []];
    //record 4 encoding colors, 4 probe colors, 1 ans, 1 loc_r(random number for location in each quadrant)

    let loc_r = [];
    let trial_r;

    let blocks_num = 2;
    let trials_num_per_block = 3;// 3 for test, there're 40 stim set in each csv file; try to use len(data_frame) for flexibility, eg: len(data_s1)
    let pre_duration=0.2
    let stimuli_duration_e = 0.1;
    let stimuli_interval = 0.9;
    let stimuli_duration_p = 2.0;
    let trial_interval = (Math.random() * (95 - 65) + 65) / 100;

    for (let b = 0; b < blocks_num; b++){
        for (let t = 0; t < trials_num_per_block; t++){
            //random location in each quadrant
            loc_r = [Math.floor((Math.random() * 4)), Math.floor((Math.random() * 4)),
                Math.floor((Math.random() * 4)), Math.floor((Math.random() * 4))];
            //random trial index.From 0~39 in each stimulation file.
            trial_r = Math.floor((Math.random() * 40));
 //           add(record, data[b], trial_r, loc_r);//---------------------------------remember!
        }
    }

    $("#setOK").click(function () {
        if (($("#subjectID").val() != "") && ($("#stimSet").val() == '1'|| $("#stimSet").val() == '2')) {
            subIdVal = $("#subjectID").val();
            conditionVal = $("#stimSet").val();
            //console.log('-->'+conditionVal+'<--');
            // assign the stimulation data of each session accroding to the input
            if (conditionVal == '1') {
                dataS1 = set2_data;
                dataS2 = set4_data;
                data = [dataS1, dataS2]
                $("#instruct").css("display", "block");
                $("#dlg").css("display", "none");
            } else if (conditionVal == '2') {
                dataS1 = set4_data;
                dataS2 = set2_data;
                data = [dataS1, dataS2];
                $("#instruct").css("display", "block");
                $("#dlg").css("display", "none");
            } else {
                alert("here!");
            }
        } else {
            alert("Wrong input! Please retry...");
        }
        //console.log('-->'+conditionVal+'<--');
        //console.log(typeof conditionVal);

        
    });

    $("#next").click(function () {
        $("#instruct").html("Session 1<br><br>Press the key ' M ' for identical sets, <br><br>and the key ' C ' for different sets.<br><br><br>Press the key ' S ' to start.");
        isTimeToStart = true;
    });
    $(document).keypress(function (event) {
        //console.log(event.which);
        if ((event.which == '83' || event.which == '115') && isTimeToStart == true) {
            $("#instruct").css("display", "none");
            $("#crossFocus").css("display", "initial");
        }
    });
//------------a function add the response data of a trial to the table, which's going to be writed as csv

    /*    function add(record, set_data, t_index, loc_random) {
            //"loc_random"--->See line 165, the for loop randomly generate 'loc_r', the location in each quadrant, and 'trial_r', the index of the chosen trial in the stimulation file.
            record[0].push(set_data[('encoding_first')][t_index])
            record[1].push(set_data[('encoding_second')][t_index])
            record[2].push(set_data[('encoding_third')][t_index])
            record[3].push(set_data[('encoding_fourth')][t_index])
            record[4].push(set_data[('probe_first')][t_index])
            record[5].push(set_data[('probe_second')][t_index])
            record[6].push(set_data[('probe_third')][t_index])
            record[7].push(set_data[('probe_fourth')][t_index])
            record[8].push(set_data[('ans')][t_index])
            record[9].push(loc_random)
        }

    //--------------------------------------------------------write the response data as a csv file

        function save(subID, record, response_key, response_time, correct) {
            let output_header = "encoding_first,encoding_second,encoding_third,encoding_fourth,probe_first,probe_second,probe_third,probe_fourth,ans,response_key,response_time,correct\n";
            let output_data;
            /*let output = {
            //---------------------------------------------------------prepared for json
                'encoding_first':record[0],
                'encoding_second':record[1],
                'encoding_third':record[2],
                'encoding_fourth':record[3],
                'probe_first':record[4],
                'probe_second':record[5],
                'probe_third':record[6],
                'probe_fourth':record[7],
                'ans': record[8],
                'response_key':response_key,
                'response_time':response_time,
               'correct':correct
            }*/
    /*       for (var i = 0; i < record[0].length; i++) {
               for (var j = 0; j < record.length; j++){
                   if(j < record.length-1){
                           output_data = output_data + String(record[j][i]) + ",";
                     }
               }
               output_data = output_data + response_key[i] + String(response_time[i]) + String(correct[i]) + "\n";
            }
           let output = output_header + output_data;

           let fileName = String(subIdVal) + ".csv";
           let blob = new Blob([output], {type : "application/octet-stream" });
           let href = URL.createObjectURL(blob);
           let link = document.createElement("a");
           document.body.appendChild(link);
           link.href = href;
           link.download = fileName;
           link.click();
       }
   */
          
    /*
    #-------some functions written for this mid-term project--------#

        function en_pr(win, record, current_t_index, pORe){
        //"record"---> A 9*40 array. See the function "add" in line 78.#"pORe"--->A string to assign to do encoding or probe. See line 37.
        //In the client code, "record" is initiated in line 153.

        //text_cross?????????????weird css?????????????

        let num_check=5# 5*5 squares;
        let check_size=[0.65,0.65];
        let location=[0,0];
        let loc;//------------->  =np.array(location)+np.array(check_size)  //2
        let xys=[]//positions of the 25 squares in the coordiate
        colors=np.zeros((num_check**2,3))

        all_co=[#the colors provoded by TA in the handout.
            [0,0,0],
            [1,0,0],
            [0,0,1],
            [0.93,0.009,0.93],
            [0,1,0],
            [1,1,0],
            [-1,-1,-1],
            [1,1,1],
            [0,0,0]
        ]
        loc1=[18,19,23,24]#the numbers of the 25 squares as shown in the handout.
        loc2=[15,16,20,21]
        loc3=[0,1,5,6]
        loc4=[3,4,8,9]
        loc_four=[loc1,loc2, loc3, loc4]#four quadrants

        r = current_t_index

        if(pORe == 'en'):
            loc_co= [record[0][r], record[1][r], record[2][r], record[3][r]]
        else:
            loc_co= [record[4][r], record[5][r], record[6][r], record[7][r]]

        #assign the 4 colors to the random locations in the 4 quadrants.
        for i in range(4):
            colors[loc_four[i][record[9][r][i]]] = all_co[loc_co[i]]
            i+=1

        low,high = num_check//-2, num_check//2#TA's code for adjust the center
        if abs(low)!=high:
            low+=1
            high+=1

        for y in range(low,high):#positions in the coordinate
            i=0
            for x in range(low,high):
                i+=1
                if i%2==0:
                    y_delta=-check_size[0]/2
                else:
                    y_delta=0
                xys.append(((check_size[0]+2)*x,(check_size[1]+2)*y+y_delta))

        stim=visual.ElementArrayStim(win,
                                    xys=xys,
                                    fieldPos=loc,
                                    colors=colors,
                                    nElements=num_check**2,
                                    elementMask=None,
                                    elementTex=None,
                                    units="deg",
                                    sizes=(check_size[0],
                                        check_size[1]))

        stim.size=(check_size[0]+10*num_check,
                    check_size[1]*num_check+check_size[0]/2)
        stim.draw()
        text_cross.draw()
        win.flip()
        }




    #---------client code-----------#

    mon=monitors.Monitor(name='myMac',width=37,distance=60)
    clock_key=core.Clock()
    text=visual.TextStim(win=win,pos=[0,0],color=[-1,-1,-1])

    for b in range(blocks_num):
        for t in range(trials_num_per_block):
            current_t_index=trials_num_per_block*b+t
            text_cross.draw()
            win.flip()
            core.wait(pre_duration)

            en_pr(win, record, current_t_index, 'en')
            core.wait(stimuli_duration_e)

            text_cross.draw()
            win.flip()
            core.wait(stimuli_interval)

            current_key='HAHA'
            current_rt=5487
            current_crt=5555
            event.clearEvents()
            clock_key.reset()
            while clock_key.getTime()<stimuli_duration_p:
                en_pr(win, record, current_t_index, 'pr')
                key_info=event.getKeys(keyList=['m','c'],timeStamped=clock_key)
                if key_info:
                    key_details=key_info[0]
                    current_key=key_details[0]
                    current_rt=key_details[1]
                    break
            #check the correctness
            if(current_key == 'm'):
                if (record[8][current_t_index] == 1):
                    current_crt = 1
                else:
                    current_crt = 0
            elif(current_key == 'c'):
                if (record[8][current_t_index] == 0):
                    current_crt = 1
                else:
                    current_crt = 0

            rkey.append(current_key)
            rt.append(current_rt)
            crt.append(current_crt)
            win.flip()
            core.wait(trial_interval)

            if ((current_t_index+1)%trials_num_per_block==0)and((current_t_index+1)%(trials_num_per_block*blocks_num)!=0):
                text.text = 'Session 2\n\nPress the key \'M\' for identical sets, and the key \'C\' for different sets.\n\nPress any key to start.'
                text.draw()
                win.flip()
                event.waitKeys()

    text.text = 'The experiment is done,\nPlease notify the experimenter.\nPress any key to exit.'
    text.draw()
    win.flip()
    event.waitKeys()

    save(subID, record, rkey, rt, crt)

    win.close()
    core.quit()
    */

</script>